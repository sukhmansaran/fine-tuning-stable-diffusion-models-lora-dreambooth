{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.5"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Please read README.md file on my github for more information.\n\nhttps://github.com/sukhmansaran/fine-tuning-stable-diffusion-models-lora-dreambooth","metadata":{}},{"cell_type":"markdown","source":"# DreamBooth + LoRA Training Pipeline for Stable Diffusion Models","metadata":{}},{"cell_type":"markdown","source":"This notebook is part one for fine tuning model for a single character. But you can fine tune for your styles, new designs, new characters in this part only and not use the part 2 of this notebook. But it works for styles, new designs. If it works for you letmeknow.","metadata":{}},{"cell_type":"code","source":"import os\nimport torch\nimport random\nfrom torch.utils.data import Dataset, DataLoader, ConcatDataset\nfrom torchvision import transforms\nfrom PIL import Image\nfrom tqdm import tqdm\nfrom transformers import AutoTokenizer\nfrom diffusers import StableDiffusionPipeline, UNet2DConditionModel\nfrom diffusers.models.attention_processor import LoRAAttnProcessor\nfrom accelerate import Accelerator","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"torch.backends.cuda.matmul.allow_tf32 = True\ntorch.backends.cudnn.allow_tf32 = True","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# HF TOKEN\nfrom huggingface_hub import login\nlogin(\"your_token\")","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Downloading Realistic Vision V5\nfrom huggingface_hub import hf_hub_download\nimport os\n\nmodel_dir = \"your_dir_for_saving_downloaded_base_model\"\nos.makedirs(model_dir, exist_ok=True)\n\nckpt_path = hf_hub_download(\n    repo_id=\"SG161222/Realistic_Vision_V5.1_noVAE\",\n    filename=\"Realistic_Vision_V5.1.safetensors\",\n    local_dir=model_dir,\n)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This is inference file necessary. The file has to be this exact file as it was used for stable diffusion 1.5 version you cannot use any other file here.","metadata":{}},{"cell_type":"code","source":"# Downloading v1-inference.yaml\n!wget -O v1-inference.yaml https://raw.githubusercontent.com/CompVis/stable-diffusion/main/configs/stable-diffusion/v1-inference.yaml","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Converting to diffusers format\nfrom diffusers.pipelines.stable_diffusion.convert_from_ckpt import download_from_original_stable_diffusion_ckpt\n\nsafetensors_path = \"downloaded_base_model_path\"\noutput_dir = \"your_dir_for_saving_converted_base_model\"\n\nconverted_pipeline = download_from_original_stable_diffusion_ckpt(\n    safetensors_path,\n    \"/v1-inference.yaml\",  # Must match SD1.5 or SD2.x\n    from_safetensors=True,\n    extract_ema=True,\n    device=\"cuda\"  # or \"cpu\"\n)\n\n# saving\nconverted_pipeline.save_pretrained(output_dir)\nprint(f\"Model saved to {output_dir}\")","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Defining configurations for the training**\n\ntrigger_word: This let's you call your character. Whenever you use this it means that you are calling/referring your character.\n\nresolution: the resolution for training your images (Recommeded is 512x512 as it is what base model was trained on. You can you 768x768 or 1024x1024, these resolutions will lead to more resource usage and unstable fine tuning.)\n\nbatch_size: how many images it will train in each step\n\ngradient_accumulation: Using this I can increase my batch size with same GPU memory usage.\n\neffective batch size = (batch_size) x (gradient_accumulation)\n\nlearning_rate: how fast you want the model to learn the character (too high the model might overfit, too low the model would not learn your character fully) (effective proven and tested learning rate would be from 5e-5 to 1e-6 and depending upon the training steps and dataset variation) \n\nmax_train_steps: how many steps you want the training to run (1 step = 1 batch run)\n\ntrain_text_encoder: whether we want to train train_text_encoder or not. (if yes we would update weights of train text encoder used in the base model using our setup) (Note: training this is necessary when training on specific characters as the base model might struggle learning your trigger_word and how it is in different scenarios)\n\nlr_scheduler: how do you want your learning rate to decay. (I tried constant, no lr scheduler it doesn't work, it model overfitted or underfitted, cosine worked best for me as the learning_rate would decay slowly.)\n\nlr_warmup_steps: when you want your learning rate to start decay (e.g. 100 means leraning rate would start decaying after 100 steps with the lr_scheduler)\n\nlora_r: Determines the rank of the low-rank adaptation matrices, controlling the number of trainable parameters added for fine-tuning.\n\nlora_alpha: A scaling factor applied to the LoRA updates, adjusting their overall impact on the model's weights.\n\nlora_dropout: Probability of randomly dropping LoRA adaptation connections during training, which helps prevent overfitting by adding regularization.","metadata":{}},{"cell_type":"code","source":"class Config:\n    # ‚úÖ Paths\n    model_path = \"your_downloaded_model_path\"\n    dataset_dir = \"your_dataset_path\"\n    output_dir = \"your_output_dir\"\n\n    # ‚úÖ Training Behavior\n    trigger_word = \"sks\"  # Keep this for identity consistency\n    resolution = 512       # Good middle ground for face detail\n    \n    batch_size = 1\n    gradient_accumulation = 4\n    learning_rate = 4e-5   # \n    max_train_steps = 3330 # \n    \n    mixed_precision = \"fp16\"\n    train_text_encoder = True  \n\n    # ‚úÖ LoRA Settings\n    lr_scheduler = \"cosine\"\n    lr_warmup_steps = 185\n    lora_r = 4\n    lora_alpha = 8\n    lora_dropout = 0.1\n    # lora_target_modules = [\"CrossAttention\", \"Attention\"]\n\n    # ‚úÖ Logging & Checkpoints\n    save_every_n_steps = 1110\n    log_every_n_steps = 370\n    generate_every_n_steps = 370\n    seed = 151101\n\ncfg = Config()","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os, json, inspect\n\ndef save_config(cfg, path=None):\n    if path is None:\n        path = os.path.join(cfg.output_dir, \"lora_config.json\")\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n\n    # grab only data attributes declared on the *class*\n    config_dict = {\n        k: v for k, v in cfg.__class__.__dict__.items()\n        if not k.startswith(\"__\") and not inspect.isfunction(v) and not inspect.ismethod(v)\n    }\n\n    with open(path, \"w\") as f:\n        json.dump(config_dict, f, indent=4)\n    print(f\"‚úÖ  Config saved to {path}\")\n\nsave_config(cfg)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Reproducibility\ntorch.manual_seed(cfg.seed)\ntorch.cuda.manual_seed(cfg.seed)\nrandom.seed(cfg.seed)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Dataset Loader\nclass ImageCaptionDataset(Dataset):\n    def __init__(self, image_dir, tokenizer, size):\n        self.image_paths = []\n        self.caption_paths = []\n        self.tokenizer = tokenizer\n\n        for fname in sorted(os.listdir(image_dir)):\n            if fname.endswith(\".png\") or fname.endswith(\".jpg\"):\n                img_path = os.path.join(image_dir, fname)\n                txt_path = os.path.splitext(img_path)[0] + \".txt\"\n                if os.path.exists(txt_path):\n                    self.image_paths.append(img_path)\n                    self.caption_paths.append(txt_path)\n\n        self.image_transforms = transforms.Compose([\n            transforms.Resize((size, size), interpolation=transforms.InterpolationMode.BILINEAR),\n            transforms.ToTensor(),\n            transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])\n\n        ])\n\n    def __len__(self):\n        return len(self.image_paths)\n\n    def __getitem__(self, idx):\n        image = Image.open(self.image_paths[idx]).convert(\"RGB\")\n        if image.getbbox() is None:\n            raise ValueError(f\"Empty image found: {self.image_paths[idx]}\")\n        else:\n            image = self.image_transforms(image)\n            with open(self.caption_paths[idx], \"r\") as f:\n                caption = f.read().strip()\n\n            inputs = self.tokenizer(caption, truncation=True, padding=\"max_length\", max_length=77, return_tensors=\"pt\")\n            \n        return {\"pixel_values\": image, \"input_ids\": inputs.input_ids.squeeze(0)}","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"I was frustrated by version mismatches and compatibility issues with popular libraries (like peft) for LoRA in pytorch. Instead of fighting package dependencies, I researched the fundamental principles behind LoRA and wrote a minimal, robust implementation compatible with any pytorch model using nn.Linear layers.\n\nMy LoRALinear class is a simple, direct wrapper for any nn.Linear layer. It adds trainable ‚ÄúLoRA‚Äù weights on top of the original weights, enabling efficient fine-tuning.","metadata":{}},{"cell_type":"code","source":"import torch.nn as nn\n\n# üîß Safer and more flexible LoRA wrapper for nn.Linear\nclass LoRALinear(nn.Module):\n    def __init__(self, linear: nn.Linear, rank: int, alpha: float):\n        super().__init__()\n\n        if not isinstance(linear, nn.Linear):\n            raise TypeError(f\"LoRALinear can only wrap nn.Linear, but got {type(linear)}\")\n\n        self.linear = linear\n        self.rank = rank\n        self.alpha = alpha\n        self.scaling = alpha / rank\n\n        # LoRA layers\n        self.lora_down = nn.Linear(linear.in_features, rank, bias=False)\n        self.lora_up = nn.Linear(rank, linear.out_features, bias=False)\n\n        # Initialization (standard LoRA practice)\n        nn.init.kaiming_uniform_(self.lora_down.weight, a=5**0.5)\n        nn.init.zeros_(self.lora_up.weight)\n\n    def forward(self, x):\n        # Original + LoRA residual\n        return self.linear(x) + self.lora_up(self.lora_down(x)) * self.scaling\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now our patcher for patching unet.\n\nThe most important question what are we patching, why that part and we would we patch?\n\nAnswer: We would patch some layers of the model not all, the layers most important for learning, new style, new character, new things are \"to_q\" ,\"to_k\", \"to_v\" and \"to_out\". These layers work together when you train your model they contain their own weights for what they learned. If we patched the old weights we might mess with the working of the model and it may produce messy, or noisy results during image generation. That's why we patch new layers and train the model these contain new weights for your specific style, character and new things. And you can load these on top of your Stable Diffusion Model and use them for image generation. ","metadata":{}},{"cell_type":"code","source":"def patch_unet_cross_attn_with_lora(unet, rank, alpha):\n    lora_params = []\n\n    for module in unet.modules():\n        for attr in ['to_q', 'to_k', 'to_v', 'to_out']:\n            if hasattr(module, attr):\n                original = getattr(module, attr)\n\n                # ‚úÖ Directly patch if it's a Linear\n                if isinstance(original, nn.Linear) and not isinstance(original, LoRALinear):\n                    lora_layer = LoRALinear(original, rank=rank, alpha=alpha)\n                    setattr(module, attr, lora_layer)\n                    lora_params.extend(lora_layer.lora_down.parameters())\n                    lora_params.extend(lora_layer.lora_up.parameters())\n                    print(f\"‚úÖ Patched {attr} in {module.__class__.__name__}\")\n\n                # üîç Special case: to_out is a ModuleList with a Linear inside\n                elif isinstance(original, nn.ModuleList):\n                    for i, sublayer in enumerate(original):\n                        if isinstance(sublayer, nn.Linear) and not isinstance(sublayer, LoRALinear):\n                            lora_layer = LoRALinear(sublayer, rank=rank, alpha=alpha)\n                            original[i] = lora_layer\n                            lora_params.extend(lora_layer.lora_down.parameters())\n                            lora_params.extend(lora_layer.lora_up.parameters())\n                            print(f\"‚úÖ Patched {attr}[{i}] in {module.__class__.__name__}\")\n                        else:\n                            print(f\"‚ö†Ô∏è Skipping {attr}[{i}] ‚Äî Not a Linear: {type(sublayer)}\")\n\n                else:\n                    print(f\"‚ö†Ô∏è Skipping {attr} in {module.__class__.__name__} ‚Äî Not a Linear or ModuleList\")\n\n    total_params = sum(p.numel() for p in lora_params)\n    print(f\"\\n‚úÖ UNet LoRA patched. Total trainable LoRA params: {total_params}\")\n    return lora_params\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This function is to unfrreze train_text encoder. I defined it for testing.  ","metadata":{}},{"cell_type":"code","source":"# def unfreeze_text_encoder_attention(text_encoder):\n#     trainable_params = []\n#     total_unfroze = 0\n\n#     for module in text_encoder.modules():\n#         if all(hasattr(module, attr) for attr in ['q_proj', 'k_proj', 'v_proj', 'out_proj']):\n#             for attr in ['q_proj', 'k_proj', 'v_proj', 'out_proj']:\n#                 proj = getattr(module, attr)\n#                 for param in proj.parameters():\n#                     param.requires_grad = True\n#                     trainable_params.append(param)\n#                 total_unfroze += 1\n#                 print(f\"‚úÖ Unfroze text encoder layer: {module.__class__.__name__} ‚Üí {attr}\")\n\n#     print(f\"\\n‚úÖ Total unfrozen attention projection blocks in text encoder: {total_unfroze}\")\n#     return trainable_params\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now we will patch the text_encoder the theory and reason is same as patching the unet layers. We would patch \"q_proj\", \"k_proj\", \"v_proj\", \"out_proj\" of the text_encoder.","metadata":{}},{"cell_type":"code","source":"def patch_text_encoder(text_encoder, rank, alpha):\n    lora_params = []\n    target_names = {\"q_proj\", \"k_proj\", \"v_proj\", \"out_proj\"}\n\n    for module in text_encoder.modules():\n        for name in target_names:\n            if hasattr(module, name):\n                proj = getattr(module, name)\n\n                # Only patch raw nn.Linear layers (skip if already patched)\n                if isinstance(proj, nn.Linear) and not isinstance(proj, LoRALinear):\n                    lora_layer = LoRALinear(proj, rank=rank, alpha=alpha)\n                    setattr(module, name, lora_layer)\n\n                    lora_params += list(lora_layer.lora_down.parameters())\n                    lora_params += list(lora_layer.lora_up.parameters())\n\n                    print(f\"üîß Patched {module.__class__.__name__}.{name} with LoRA\")\n\n    print(f\"‚úÖ Finished patching text encoder ‚Äî LoRA params: {sum(p.numel() for p in lora_params):,}\")\n    return lora_params\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now this is where we would create our pipeline, load our model into pipeline, load our tokenizer, load our trigger word into the tokenizer, load our unet and patch it, load our text_encoder and patch it. But the important thing is that we need to freeze our params of unet and text_encoder before patching so we accidently don't train them or update them and we only train or update our newly patched layers. We are using AdamW optimer here originally used with base our base model. We would also load our dataset into the pipeline and prepare everything for training.","metadata":{}},{"cell_type":"code","source":"import torch, os\nfrom accelerate import Accelerator\nfrom diffusers          import StableDiffusionPipeline, UNet2DConditionModel\nfrom transformers        import AutoTokenizer, get_scheduler\nfrom torch.utils.data    import DataLoader\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  1.  Accelerate & Config\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\naccelerator = Accelerator(split_batches=True)\ndevice       = accelerator.device\ncfg          = Config()                       # <- your existing config class\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  2.  Load full pipeline   (VAE, Text‚ÄëEncoder, UNet, etc.)\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\npipe = StableDiffusionPipeline.from_pretrained(\n    cfg.model_path,\n    torch_dtype=torch.float16\n).to(device)\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  3.  Trigger‚Äëtoken ‚Üí add BEFORE any dataset tokenisation\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\ntokenizer      = AutoTokenizer.from_pretrained(cfg.model_path, subfolder=\"tokenizer\")\ntrigger_token  = cfg.trigger_word                    # e.g. \"sks\"\n\nif len(tokenizer.tokenize(trigger_token)) > 1:       # splits ‚Üí need custom token\n    tokenizer.add_tokens([trigger_token])\n    pipe.text_encoder.resize_token_embeddings(len(tokenizer))\n\n    # initialise the new embedding from \"person\"\n    with torch.no_grad():\n        emb           = pipe.text_encoder.get_input_embeddings()\n        new_id        = tokenizer.convert_tokens_to_ids(trigger_token)\n        base_id       = tokenizer.convert_tokens_to_ids(\"person\")\n        emb.weight[new_id] = emb.weight[base_id].clone()\n\n    print(f\"‚úÖ Added custom token '{trigger_token}' (id {new_id})\")\nelse:\n    print(f\"‚úÖ '{trigger_token}' already a single token\")\n\npipe.tokenizer = tokenizer        # keep pipeline & dataset in sync\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  4.  Load UNet separately (so we can LoRA‚Äëpatch it)\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nunet = UNet2DConditionModel.from_pretrained(\n    cfg.model_path,\n    subfolder=\"unet\",\n    torch_dtype=torch.float16\n).to(device)\n\n# Freeze everything first\nfor p in unet.parameters():            p.requires_grad = False\nfor p in pipe.text_encoder.parameters(): p.requires_grad = False\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  5.  LoRA‚Äëpatch UNet  (+ optional text‚Äëencoder)\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nlora_params  = patch_unet_cross_attn_with_lora(unet, cfg.lora_r, cfg.lora_alpha)\n\nif cfg.train_text_encoder:\n    lora_params += patch_text_encoder(pipe.text_encoder, cfg.lora_r, cfg.lora_alpha)\n    print(\"‚úÖ Text‚Äëencoder LoRA patched\")\n\nif not lora_params:\n    raise RuntimeError(\"No trainable LoRA params collected!\")\n\nprint(f\"üîç LoRA trainable parameters: {sum(p.numel() for p in lora_params):,}\")\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  6.  Optimiser & Scheduler (LoRA params only)\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\noptimizer     = torch.optim.AdamW(lora_params, lr=cfg.learning_rate)\n\nlr_scheduler  = get_scheduler(\n    cfg.lr_scheduler,\n    optimizer          = optimizer,\n    num_warmup_steps   = cfg.lr_warmup_steps,\n    num_training_steps = cfg.max_train_steps,\n)\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  7.  Dataset & Dataloader  (tokenizer now has fixed token!)\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\ndataset    = ImageCaptionDataset(cfg.dataset_dir, tokenizer, cfg.resolution)\ndataloader = DataLoader(dataset, batch_size=cfg.batch_size, shuffle=True)\n\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n#  8.  Prepare for Accelerate & training\n# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\npipe.text_encoder.to(device, dtype=torch.float16)\nunet.train()\n\nunet, optimizer, dataloader = accelerator.prepare(unet, optimizer, dataloader)\n\nprint(\"üöÄ Setup complete ‚Äì ready to train LoRA adapters.\")\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Sanity check that how many params we are going to train now out of total params. ","metadata":{}},{"cell_type":"code","source":"total_params = sum(p.numel() for p in unet.parameters()) + sum(p.numel() for p in pipe.text_encoder.parameters())\ntrainable_params = sum(p.numel() for p in unet.parameters() if p.requires_grad) + \\\n                   sum(p.numel() for p in pipe.text_encoder.parameters() if p.requires_grad)\n\nprint(f\"‚úÖ Trainable parameters: {trainable_params} / {total_params}\")\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Loading the vae used in the base model. The vae is what encodes images into latent spacs and decodes our latent spaces back into images.","metadata":{}},{"cell_type":"code","source":"from diffusers import AutoencoderKL\n\nvae = AutoencoderKL.from_pretrained(\"stabilityai/sd-vae-ft-mse\", torch_dtype=torch.float32)\npipe.vae = vae\n\npipe.vae.to(accelerator.device, dtype=torch.float32)","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(accelerator.device)  # Should print: cuda\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Sanity check that if our paramters contain NAN values before our training begins.","metadata":{}},{"cell_type":"code","source":"for name, param in unet.named_parameters():\n    if torch.isnan(param).any():\n        print(f\"NaN detected in UNet parameter: {name}\")\n        break\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now we would create functions for checking if our trigger_word is in the tokenizer, a function to generate sample images during the model training for checks if our model is learning or not, whether it is overfitting or underfitting. Whether if we need to stop our training, whether we need to change our configurations settings.","metadata":{}},{"cell_type":"code","source":"import os\nimport random\nimport torch\nfrom diffusers import DDIMScheduler\nfrom torch import autocast\n\n# ‚úÖ Optional: Reproducibility\ndef seed_everything(seed=151101):\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n\n# ‚úÖ Optional: Disable NSFW filter (for local testing)\ndef disable_safety(pipe):\n    pipe.safety_checker = lambda images, **kwargs: (images, [False] * len(images))\n\n# ‚úÖ Fix tokenizer trigger word if needed\ndef ensure_trigger_token(pipe, trigger_word):\n    tokens = pipe.tokenizer.tokenize(trigger_word)\n    if len(tokens) > 1:\n        print(f\"‚ö†Ô∏è Trigger word '{trigger_word}' is split: {tokens}. Fixing...\")\n        pipe.tokenizer.add_tokens([trigger_word])\n        pipe.text_encoder.resize_token_embeddings(len(pipe.tokenizer))\n\n        with torch.no_grad():\n            embeddings = pipe.text_encoder.get_input_embeddings()\n            init_id = pipe.tokenizer.convert_tokens_to_ids(\"person\")\n            new_id = pipe.tokenizer.convert_tokens_to_ids(trigger_word)\n            embeddings.weight[new_id] = embeddings.weight[init_id].clone()\n\n        print(f\"‚úÖ Re-added and initialized embedding for trigger word '{trigger_word}'\")\n    else:\n        print(f\"‚úÖ Trigger word '{trigger_word}' is tokenized correctly: {tokens}\")\n\n# ‚úÖ Generate and save a sample image\ndef generate_sample_image(step, save_path, prompt=None, negative_prompt=None, seed=151101):\n    print(f\"\\nüé® Generating preview at step {step}...\")\n\n    # ‚úÖ Reproducible randomness\n    seed_everything(seed)\n    generator = torch.Generator(\"cuda\").manual_seed(seed)\n\n    # ‚úÖ Restore UNet (EMA if available, else current)\n    if 'ema_unet' in globals() and ema_unet is not None:\n        pipe.unet = ema_unet\n        print(\"üì¶ Using EMA UNet for inference.\")\n    else:\n        pipe.unet = accelerator.unwrap_model(unet)\n        print(\"üì¶ Using current UNet for inference.\")\n    \n    # ‚úÖ Restore LoRA-trained text_encoder if trained\n    if cfg.train_text_encoder:\n        pipe.text_encoder = accelerator.unwrap_model(pipe.text_encoder)\n        print(\"üß† Restored LoRA-trained text encoder for inference.\")\n\n    pipe.to(\"cuda\")\n\n    # ‚úÖ Disable NSFW checker for previewing\n    disable_safety(pipe)\n\n    # ‚úÖ Ensure tokenizer supports the trigger word\n    ensure_trigger_token(pipe, cfg.trigger_word)\n\n    # ‚úÖ Use fast scheduler\n    pipe.scheduler = DDIMScheduler.from_config(pipe.scheduler.config)\n\n    # ‚úÖ Default prompts if not provided\n    if prompt is None:\n        prompt = f\"{cfg.trigger_word}, your prompt\"\n    if negative_prompt is None:\n        negative_prompt = (\n            \"blurry, low resolution, grainy, overexposed, underexposed, poor lighting, jpeg artifacts, glitch, \"\n            \"cropped, out of frame, watermark, duplicate, poorly drawn face, asymmetrical face, deformed face, \"\n            \"unnatural skin texture, doll-like face, bad eyes, mutated hands, extra fingers, distorted anatomy, \"\n            \"unrealistic proportions, cartoon, anime, illustration, painting, horror, morbid\"\n        )\n\n    # ‚úÖ Generate image\n    with autocast(\"cuda\"):\n        # Generate 4 images\n        result = pipe(\n            prompt=[prompt] * 4,\n            negative_prompt=[negative_prompt] * 4,\n            num_inference_steps=30,\n            guidance_scale=6.0,\n            height=cfg.resolution,\n            width=cfg.resolution,\n            generator=generator,\n        )\n\n    # ‚úÖ Save images\n    os.makedirs(save_path, exist_ok=True)\n    for i, image in enumerate(result.images):\n        save_name = os.path.join(save_path, f\"preview_step_{step}_{i+1}.png\")\n        image.save(save_name)\n        print(f\"‚úÖ Saved: {save_name}\")\n\n\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Our main training loop for training our model. ","metadata":{}},{"cell_type":"code","source":"from torch.amp import autocast\nfrom safetensors.torch import save_file\nfrom diffusers.models.attention_processor import LoRAAttnProcessor\nfrom PIL import Image\n\n# üõ†Ô∏è Optional: Force LoRA layers to float32 for stability\nfor module in unet.modules():\n    if isinstance(module, LoRAAttnProcessor):\n        for param in module.parameters():\n            param.data = param.data.to(torch.float32)\n\nglobal_step = 0\nunet.train()\n\nfor epoch in range(100):\n    for step, batch in enumerate(tqdm(dataloader)):\n        with accelerator.accumulate(unet):\n            # ‚úÖ 1. Move batch to device\n            pixel_values = batch[\"pixel_values\"].to(accelerator.device, dtype=torch.float32)  # VAE prefers float32\n            input_ids = batch[\"input_ids\"].to(accelerator.device)\n            # print(tokenizer.decode(input_ids[0]))\n# \n            # ‚úÖ 2. Encode with VAE (float32), then clamp and convert\n            with torch.no_grad():\n                latents = pipe.vae.encode(pixel_values).latent_dist.sample()\n                latents = latents.clamp(-10, 10)  # Avoid extreme latent values\n                latents = latents * 0.18215\n                latents = latents.to(accelerator.device, dtype=torch.float16)\n\n            # ‚úÖ 3. Add scaled noise\n            noise = 0.9 * torch.randn_like(latents)  # reduce intensity for early stability\n            max_timestep = 300 if global_step < 100 else pipe.scheduler.config.num_train_timesteps\n            timesteps = torch.randint(0, max_timestep, (latents.shape[0],), device=latents.device).long()\n            noisy_latents = pipe.scheduler.add_noise(latents, noise, timesteps)\n\n            for name, param in unet.named_parameters():\n                if torch.isnan(param).any() or torch.isinf(param).any():\n                    print(f\"[‚ùå NaN/Inf detected] in parameter: {name}\")\n                    break\n\n\n            # ‚úÖ 4. Encode text\n            with torch.no_grad():\n                encoder_hidden_states = pipe.text_encoder(input_ids)[0]\n                encoder_hidden_states = encoder_hidden_states.to(accelerator.device, dtype=torch.float16)\n\n            # ‚úÖ 5. UNet forward with autocast\n            with autocast(\"cuda\", dtype=torch.float32):\n                model_pred = unet(\n                    noisy_latents,\n                    timesteps,\n                    encoder_hidden_states=encoder_hidden_states,\n                ).sample\n\n            # ‚úÖ Debug logs\n            # print(f\"Latents mean/std: {latents.mean().item():.4f}/{latents.std().item():.4f}\")\n            # print(f\"model_pred mean/std: {model_pred.mean().item():.4f}/{model_pred.std().item():.4f}\")\n\n            # ‚úÖ Check for NaNs\n            if torch.isnan(model_pred).any():\n                print(\"‚ùå NaN in model_pred!\")\n                print(\"Input stats:\", noisy_latents.mean(), noisy_latents.std())\n                print(\"Timesteps:\", timesteps)\n                print(\"Encoder stats:\", encoder_hidden_states.mean(), encoder_hidden_states.std())\n                continue\n\n            # ‚úÖ 6. Compute loss\n            noise = noise.to(model_pred.dtype)\n            loss = torch.nn.functional.l1_loss(model_pred, noise)\n\n            if torch.isnan(loss) or torch.isinf(loss):\n                print(f\"‚ö†Ô∏è Skipping invalid loss at step {global_step}\")\n                continue\n\n            # ‚úÖ 7. Backward + optimizer\n            accelerator.backward(loss)\n            if accelerator.sync_gradients:\n                optimizer.step()\n                lr_scheduler.step()\n                optimizer.zero_grad()\n                global_step += 1\n\n                # ‚úÖ Logging\n                if global_step % cfg.log_every_n_steps == 0:\n                    print(f\"Step {global_step} | Loss: {loss.item():.4f}\")\n\n\n                # ‚úÖ Save LoRA Weights\n                if global_step % cfg.save_every_n_steps == 0:\n                    save_path = os.path.join(cfg.output_dir, f\"step_{global_step}\")\n                    os.makedirs(save_path, exist_ok=True)\n                \n                    def extract_lora_weights(state_dict):\n                        return {k: v for k, v in state_dict.items() if \"lora\" in k.lower()}\n                \n                    # ‚úÖ Extract only LoRA weights from UNet and text encoder\n                    unet_lora = extract_lora_weights(accelerator.unwrap_model(unet).state_dict())\n                    text_lora = extract_lora_weights(accelerator.unwrap_model(pipe.text_encoder).state_dict())\n                \n                    # ‚úÖ Combine weights into a single dictionary\n                    combined_lora = {**unet_lora, **text_lora}\n                \n                    # ‚úÖ Save using safetensors\n                    save_file(combined_lora, os.path.join(save_path, \"lora_only.safetensors\"))\n                \n                    print(f\"‚úÖ Saved combined LoRA checkpoint at step {global_step} ‚Üí {save_path}/lora_only.safetensors\")\n\n                    \n                # üîç Generate sample image\n                if global_step % cfg.generate_every_n_steps == 0:\n                    img_path = os.path.join('/kaggle/working/gen_images', f\"step_{global_step}\")\n                    generate_sample_image(global_step, img_path)\n\n        # ‚úÖ Exit condition\n        if global_step >= cfg.max_train_steps:\n            break\n    if global_step >= cfg.max_train_steps:\n        break\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The code for saving both phase 1 weights at the end of the training into a single file. It contains unet, text_encoder weights into a single lora.","metadata":{}},{"cell_type":"code","source":"# # Final save\n# # Save both UNet and text encoder\n# unet_state_dict = accelerator.unwrap_model(unet).state_dict()\n# text_encoder_state_dict = accelerator.unwrap_model(pipe.text_encoder).state_dict()\n\n# # Combine and save as safetensors\n# save_file({**unet_state_dict, **text_encoder_state_dict}, \"full_model_lora.safetensors\")","metadata":{},"outputs":[],"execution_count":null}]}